# Для Полины и Алены
import psycopg2

class Database:
    def __init__(self):
        db = psycopg2.connect(dbname='database', user='db_user', password='mypassword', host='localhost')
        self.cur = db.cursor()
        self.cur.execute(""" CREATE TABLE "ПРЕДСТАВИТЕЛЬ IT"
                            (
                            "ID" character CHECK( LENGTH("ID") >=5 AND  LENGTH("ID") <=32),
                            "CHAT ID" character varying (64),
                            "ФАМИЛИЯ" character varying (64),
                            "ИМЯ" character varying (64),
                            "ЗАДАЧА" integer,
                            PRIMARY KEY ("ID")
                            ); """)

        self.cur.execute(""" CREATE TABLE "ПРЕДСТАВИТЕЛЬ НКО"
                             (
                             "ID" character CHECK( LENGTH("ID") >=5 AND  LENGTH("ID") <=32),
                             "CHAT ID" character varying (64),
                             "ФАМИЛИЯ" character varying (64),
                             "ИМЯ" character varying (64),
                             PRIMARY KEY ("ID")
                             ); """)

        self.cur.execute(""" CREATE TABLE "МОДЕРАТОР"
                            (
                            "ID" character CHECK( LENGTH("ID") >=5 AND  LENGTH("ID") <=32),
                            “CHAT ID” character varying (64),
                            "ФАМИЛИЯ" character varying (64),
                            "ИМЯ" character varying (64),
                            PRIMARY KEY ("ID")
                            ); """)

        self.cur.execute(""" CREATE TABLE "ЗАДАЧА"
                            (
                            "ID" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                            "ЗАКАЗЧИК" character CHECK( LENGTH("ID") >=5 AND  LENGTH("ID") <=32),
                            "СФЕРА" integer,
                            "ИСПОЛНИТЕЛЬ" character CHECK( LENGTH("ID") >=5 AND  LENGTH("ID") <=32),
                            "ОПИСАНИЕ" character varying (500),
                            "СОСТОЯНИЕ" integer,
                            PRIMARY KEY ("ID")
                            ); """)

        self.cur.execute(""" CREATE TABLE "СФЕРА"
                            (
                            "ID" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                            "НАЗВАНИЕ" character varying (50),
                            PRIMARY KEY ("ID")
                            ); """)

        self.cur.execute(""" CREATE TABLE "СФЕРА - IT"
                            (
                            "СФЕРА" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
                            "ПРЕДСТАВИТЕЛЬ IT" character CHECK( LENGTH("ID") >=5 AND  LENGTH("ID") <=32),
                            
                            PRIMARY KEY ("ID")
                            );""")

        # self.users = []

    def create_it_person(self, id, surname, name):
        self.cur.execute(""" INSERT INTO “ПРЕДСТАВИТЕЛЬ IT” VALUES (id, surname, name, 0); """)

    def create_nko_person(self, ):
        self.cur.execute(""" INSERT INTO “ПРЕДСТАВИТЕЛЬ НКО” VALUES (id, surname, name); """)

    def create_moderator(self, ):
        self.cur.execute(""" INSERT INTO “МОДЕРАТОР” VALUES (id, surname, name); """)

    def get_spheres(self):
        """ выдает список сфер обязательно всегда в одном и том же порядке (сортируйте по id)"""
        # return ["Дизайн", "Создатель сайтов", "Аналитик", "Дата сайнтист"]
        return self.cur.execute(""" SELECT "НАЗВАНИЕ" FROM "СФЕРА"; """)

    def get_user_spheres(self, username):
        """"""
        return self.cur.execute(""" SELECT * FROM "СФЕРА - IT" WHERE ID=username; """)

    def add_spheres2user(self, username, list_id_spheres):
        for id_sphere in list_id_spheres:
            self.cur.execute(""" INSERT INTO “СФЕРА - IT” VALUES (id_sphere, username); """)

    def add_task(self, id_nko, id_sphere, description):
        return self.cur.execute(""" INSERT INTO “ЗАДАЧА” 
        VALUES (SELECT COUNT(*) FROM "ЗАДАЧА", id_nko, id_sphere, id_it = None, description, condition = 1) """)


bot_db = Database()